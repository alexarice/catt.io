prog: COH IDENT COLON RPAR
##
## Ends in an error in state: 19.
##
## defn -> COH IDENT tele COLON . expr [ LET EOF COH ]
##
## The known suffix of the stack is as follows:
## COH IDENT tele COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: COH IDENT COLON TYPE TYPE
##
## Ends in an error in state: 24.
##
## nonempty_list(defn) -> defn . [ EOF ]
## nonempty_list(defn) -> defn . nonempty_list(defn) [ EOF ]
##
## The known suffix of the stack is as follows:
## defn
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: COH IDENT TYPE
##
## Ends in an error in state: 18.
##
## defn -> COH IDENT tele . COLON expr [ LET EOF COH ]
## tele -> tele . var_decl [ LPAR COLON ]
##
## The known suffix of the stack is as follows:
## COH IDENT tele
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: COH TYPE
##
## Ends in an error in state: 16.
##
## defn -> COH . IDENT tele COLON expr [ LET EOF COH ]
##
## The known suffix of the stack is as follows:
## COH
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET IDENT COLON RPAR
##
## Ends in an error in state: 10.
##
## defn -> LET IDENT tele COLON . expr EQUAL expr [ LET EOF COH ]
##
## The known suffix of the stack is as follows:
## LET IDENT tele COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET IDENT COLON TYPE EQUAL RPAR
##
## Ends in an error in state: 12.
##
## defn -> LET IDENT tele COLON expr EQUAL . expr [ LET EOF COH ]
##
## The known suffix of the stack is as follows:
## LET IDENT tele COLON expr EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET IDENT COLON TYPE TYPE
##
## Ends in an error in state: 11.
##
## defn -> LET IDENT tele COLON expr . EQUAL expr [ LET EOF COH ]
##
## The known suffix of the stack is as follows:
## LET IDENT tele COLON expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET IDENT LPAR IDENT COLON RPAR
##
## Ends in an error in state: 6.
##
## var_decl -> LPAR IDENT COLON . expr RPAR [ LPAR COLON ]
##
## The known suffix of the stack is as follows:
## LPAR IDENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET IDENT LPAR IDENT COLON TYPE TYPE
##
## Ends in an error in state: 8.
##
## var_decl -> LPAR IDENT COLON expr . RPAR [ LPAR COLON ]
##
## The known suffix of the stack is as follows:
## LPAR IDENT COLON expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET IDENT LPAR IDENT TYPE
##
## Ends in an error in state: 5.
##
## var_decl -> LPAR IDENT . COLON expr RPAR [ LPAR COLON ]
##
## The known suffix of the stack is as follows:
## LPAR IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET IDENT LPAR TYPE
##
## Ends in an error in state: 4.
##
## var_decl -> LPAR . IDENT COLON expr RPAR [ LPAR COLON ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET IDENT TYPE
##
## Ends in an error in state: 3.
##
## defn -> LET IDENT tele . COLON expr EQUAL expr [ LET EOF COH ]
## tele -> tele . var_decl [ LPAR COLON ]
##
## The known suffix of the stack is as follows:
## LET IDENT tele
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET TYPE
##
## Ends in an error in state: 1.
##
## defn -> LET . IDENT tele COLON expr EQUAL expr [ LET EOF COH ]
##
## The known suffix of the stack is as follows:
## LET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TYPE
##
## Ends in an error in state: 0.
##
## prog' -> . prog [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

