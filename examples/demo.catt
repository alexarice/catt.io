#
#  demo.catt - new syntax demo and whatnot
#

let id (A : U) (a : A) : A = a
# let bad (A : U) (B : U) (a : A) (b : B) : B = a

let cattest1 (C : Cat) : U = [ C ]
let cattest2 (C : Cat) (x :: C) (y :: C) : Cat = x => y
let cattest3 (C : Cat) (x :: C) (y :: C) : U = [ x => y ]
let cattest4 (C : Cat) (x :: C) (y :: C)
  (f :: x => y) (g :: x => y)
  : Cat = f => g



coh [ (C : Cat) (x :: C) : x => x ] y 

# coh id (C : Cat)
#     (x :: C)
#   : x => x

# coh comp (C : Cat)
#     (x :: C)
#     (y :: C) (f :: x => y)
#     (z :: C) (g :: y => z)
#   : x => z

# coh comp31201 (C : Cat)
#     (x :: C)
#     (y :: C) (f :: x => y)
#              (g :: x => y) (a :: f => g)
#                            (b :: f => g) (m :: a => b)
#              (h :: x => y) (c :: g => h)
#     (z :: C) (k :: y => z)
#   : x => z
