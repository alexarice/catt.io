#
#  demo.catt - new syntax demo and whatnot
#

# let idf (A : U) (a : A) (b : A) (c : A) : A = a
# let dlb (A : U) (f : (a : A) -> A) (a : A) : A = f (f a)
# let lams (A : U) : (a : A) -> (b : A) -> A = \a.\b.a
# let bad (A : U) (B : U) (a : A) (b : B) : B = a

# let cattest1 (C : Cat) : U = [ C ]
# let cattest2 (C : Cat) (x :: C) (y :: C) : Cat = C | x => y
# let cattest3 (C : Cat) (x :: C) (y :: C) : U = [ x => y ]

# coh id (C : Cat)
#     (x :: C)
#   : x => x

# coh comp (C : Cat)
#     (x :: C)
#     (y :: C) (f :: x => y)
#     (z :: C) (g :: y => z)
#   : x => z


coh comp31201 (C : Cat)
    (x :: C)
    (y :: C) (f :: x => y)
             (g :: x => y) (a :: f => g)
                           (b :: f => g) (m :: a => b)
             (h :: x => y) (c :: g => h)
    (z :: C) (k :: y => z)
  : x => z
