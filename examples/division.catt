#
#  division.catt - working on left division
#

import prelude

coh whisk_l_comp
    (x : *)
    (y : *) (f : x -> y)
    (z : *) (g : y -> z)
    (w : *) (h : z -> w)
            (k : z -> w) (a : h -> k)
  : comp221(comp120(f,comp120(g,a)),assoc_l(f,g,k)) ->
    comp221(assoc_l(f,g,h),comp120(comp110(f,g),a))

coh ichg21
    (x : *)
    (y : *) (f : x -> y)
            (g : x -> y) (a : f -> g)
    (z : *) (h : y -> z)
            (k : y -> z) (b : h -> k)
  : comp221(comp210(a,h),comp120(g,b)) ->
    comp221(comp120(f,b),comp210(a,k))

coh ichg21_inv
    (x : *)
    (y : *) (f : x -> y)
            (g : x -> y) (a : f -> g)
    (z : *) (h : y -> z)
            (k : y -> z) (b : h -> k)
  : comp221(comp120(f,b),comp210(a,k)) -> 
    comp221(comp210(a,h),comp120(g,b)) 

section
  (x : *) (y : *) (z : *)
  
  (u : x -> y) (ui : y -> x)
  (r0 : comp110(ui,u) -> id(y))
  (r1 : comp110(u,ui) -> id(x))
  
  (v0 : y -> z) (v1 : y -> z)  
  (s : v0 -> v1)
  (t : v0 -> v1)
  (w : comp120(u,s) -> comp120(u,t))
  where   

  # the composite we want.

  # insert id
  sig step1 : comp221(comp120(comp110(ui,u),s),comp210(r0,v1)) ->
              comp22211(id1(comp110(comp110(ui,u),v0)),comp120(comp110(ui,u),s),comp210(r0,v1))

  # split assoc
  sig step2 : comp22211(id1(comp110(comp110(ui,u),v0)),comp120(comp110(ui,u),s),comp210(r0,v1)) -> 
              comp22211(comp221(assoc_r(ui,u,v0),assoc_l(ui,u,v0)),comp120(comp110(ui,u),s),comp210(r0,v1))

  # reassoc
  sig step3 : comp22211(comp221(assoc_r(ui,u,v0),assoc_l(ui,u,v0)),comp120(comp110(ui,u),s),comp210(r0,v1)) -> 
              comp22211(assoc_r(ui,u,v0),comp221(assoc_l(ui,u,v0),comp120(comp110(ui,u),s)),comp210(r0,v1))

  # whisk coherence
  sig step4 : comp22211(assoc_r(ui,u,v0),comp221(assoc_l(ui,u,v0),comp120(comp110(ui,u),s)),comp210(r0,v1)) -> 
              comp22211(assoc_r(ui,u,v0),comp221(comp120(ui,comp120(u,s)),assoc_l(ui,u,v1)),comp210(r0,v1))


  # using w
  sig step5 : comp22211(assoc_r(ui,u,v0),comp221(comp120(ui,comp120(u,s)),assoc_l(ui,u,v1)),comp210(r0,v1)) ->
              comp22211(assoc_r(ui,u,v0),comp221(comp120(ui,comp120(u,t)),assoc_l(ui,u,v1)),comp210(r0,v1))                                                                                   

  # whisk coherence
  sig step6 : comp22211(assoc_r(ui,u,v0),comp221(comp120(ui,comp120(u,t)),assoc_l(ui,u,v1)),comp210(r0,v1)) ->
              comp22211(assoc_r(ui,u,v0),comp221(assoc_l(ui,u,v0),comp120(comp110(ui,u),t)),comp210(r0,v1))

  # reassoc
  sig step7 : comp22211(assoc_r(ui,u,v0),comp221(assoc_l(ui,u,v0),comp120(comp110(ui,u),t)),comp210(r0,v1)) ->
              comp22211(comp221(assoc_r(ui,u,v0),assoc_l(ui,u,v0)),comp120(comp110(ui,u),t),comp210(r0,v1))

  # assoc inv
  sig step8 : comp22211(comp221(assoc_r(ui,u,v0),assoc_l(ui,u,v0)),comp120(comp110(ui,u),t),comp210(r0,v1)) ->
              comp22211(id1(comp110(comp110(ui,u),v0)),comp120(comp110(ui,u),t),comp210(r0,v1))

  # unitor
  sig step9 : comp22211(id1(comp110(comp110(ui,u),v0)),comp120(comp110(ui,u),t),comp210(r0,v1)) ->
              comp221(comp120(comp110(ui,u),t),comp210(r0,v1))

  # w1 will be the composition of the above steps.

  sig w1 : comp221(comp120(comp110(ui,u),s),comp210(r0,v1)) ->
           comp221(comp120(comp110(ui,u),t),comp210(r0,v1)) 

  # the interchangers ...
  
  let coh_ichg_up : comp221(comp210(r0,v0),comp120(id(y),s)) ->
                    comp221(comp120(comp110(ui,u),s),comp210(r0,v1))
                  = ichg21(r0,s)

  let coh_ichg_down : comp221(comp120(comp110(ui,u),t),comp210(r0,v1)) -> 
                      comp221(comp210(r0,v0),comp120(id(y),t)) 
                    = ichg21_inv(r0,t)

  sig want : comp221(comp210(r0,v0),comp120(id(y),s)) -> 
             comp221(comp210(r0,v0),comp120(id(y),t))
             
end
