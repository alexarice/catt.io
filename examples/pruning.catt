#
#  pruning.catt - testing pruning algo
#

let id = coh (x : *) : x -> x

let id2 = coh (x : *)
              (y : *) (f : x -> y)
        : f -> f
        
let h = comp (x : *)
             (y : *) (f : x -> y)
             (z : *) (g : y -> z)
        : x -> z

let h2 = comp (x : *)
              (y : *) (f : x -> y)
                      (g : x -> y) (a : f -> g)
              (z : *) (h : y -> z)
                      (k : y -> z) (b : h -> k)
         : h(x,y,f,z,h) -> h(x,y,g,z,k)

let v2 = comp (x : *)
              (y : *) (f : x -> y)
                      (g : x -> y) (a : f -> g)
                      (h : x -> y) (b : g -> h)
         : f -> h

let h2coh = coh (x : *)
                (y : *) (f : x -> y)
                        (g : x -> y) (a : f -> g)
                (z : *) (h : y -> z)
                        (k : y -> z) (b : h -> k)
          : h2(x,y,f,g,a,z,h,k,b) -> h2(x,y,f,g,a,z,h,k,b)

let p1 (x : *)
       (y : *) (f : x -> y)
               (g : x -> y) (a : f -> g)
       (z : *) (i : y -> z) : h(x,y,f,z,i) -> h(x,y,g,z,i)
       = h2(x,y,f,g,v2(x,y,f,f,id2(x,y,f),g,a),z,i,i,id2(y,z,i))

normalize (x : *)
          (y : *) (f : x -> y)
                  (g : x -> y) (a : f -> g)
          (z : *) (i : y -> z)
 | p1(x,y,f,g,a,z,i)


# [comp (x0 : *)
#       (x1 : *) (x2 : x0 -> x1)
#                (x3 : x0 -> x1) (x4 : x2 -> x3)
#       (x5 : *) (x6 : x1 -> x5)
#                (x7 : x1 -> x5) (x8 : x6 -> x7) : [comp (x0 : *) (x1 : *) (x2 : x0 -> x1) (x3 : *) (x4 : x1 -> x3) : x0 -> x3](x0, x1, x2, x5, x6) ->
#                                                  [comp (x0 : *) (x1 : *) (x2 : x0 -> x1) (x3 : *) (x4 : x1 -> x3) : x0 -> x3](x0, x1, x3, x5, x7)]
#   (x, y, f, g,
#     [comp (x0 : *)
#           (x1 : *) (x2 : x0 -> x1)
#                    (x3 : x0 -> x1) (x4 : x2 -> x3)
#                    (x5 : x0 -> x1) (x6 : x3 -> x5) : x2 -> x5]
#       (x, y, f, f, [coh (x0 : *) (x1 : *) (x2 : x0 -> x1) : x2 -> x2](x, y, f), g, a),
#      z, i, i, [coh (x0 : *) (x1 : *) (x2 : x0 -> x1) : x2 -> x2](y, z, i))

# [comp (x0 : *)
#       (x1 : *) (x2 : x0 -> x1)
#                (x3 : x0 -> x1) (x4 : x2 -> x3)
#       (x5 : *) (x6 : x1 -> x5) : [comp (x0 : *) (x1 : *) (x2 : x0 -> x1) (x3 : *) (x4 : x1 -> x3) : x0 -> x3](x0, x1, x2, x5, x6) ->
#                                  [comp (x0 : *) (x1 : *) (x2 : x0 -> x1) (x3 : *) (x4 : x1 -> x3) : x0 -> x3](x0, x1, x3, x5, x6)]
#                                  (x, y, f, g, [comp (x0 : *) (x1 : *) (x2 : x0 -> x1) (x5 : x0 -> x1) (x6 : x2 -> x5) : x2 -> x5](x, y, f, g, a), z, i)


